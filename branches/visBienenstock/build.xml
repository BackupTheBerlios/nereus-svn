<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- build-file fuer Ant zum Projekt nereus                     -->

<!--
 *
 * Dateiname      : build.xml
 * Erzeugt        : 29. April 2005
 * Letzte Änderung: 14. Juni 2005 durch Dietmar Lippold
 * Autoren        : Eugen Volk 
 *                  
 *
 * Diese Datei gehört zum Projekt Nereus (http://nereus.berlios.de/).
 * Die erste Version dieser Datei wurde erstellt im Rahmen einer
 * Diplomarbeit von Eugen Volk am Institut für Intelligente Systeme
 * der Universität Stuttgart unter Betreuung von Dietmar Lippold
 * (dietmar.lippold@informatik.uni-stuttgart.de).
 *
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */
-->
<!-- Hinweise zur Benutzung werden nach Aufruf von "ant" ohne weitere -->
<!-- Parameter ausgegeben.                                            -->

<!-- Folgende Ziele sind vorhanden:                                   -->


<!--- * clean         : Loescht alle von ant erzeugten Dateien        -->
<!--- * help          : Gibt eine Meldung zur Benutzung aus           -->

<project name="Nereus" default="help">
  <!-- Festlegung der allgemeinen Verzeichnisse                       -->
  <property name="source" location="source"/>
  <property name="libs" location="libs"/>
  <property name="config" location="config"/>
  <property name="runScripts" location="runScripts"/>
  <property name="scenarios" location="${source}/scenarios"/>
  <property name="documentation" location="documentation"/>
  <property name="build" location="build"/>
  <property name="dist" location="dist"/>
  <property name="classes" location="classes"/>
  <property name="scenariosconfig" location="scenariosconfig"/>
  <!-- weka library -->
  <property name="wekaJar" location="libs/weka.jar"/>
 
  <!-- Compilieren alle Projekt- Dateien (mit ausnahme von Scenarios)                                    -->
 <target name="compile" description="Compiliert Projekt-Source-Dateien ">
   <echo message="compiliere alle Source-Dateien "/>
   <mkdir dir="${build}"/>
   <javac srcdir="${source}"
          destdir="${build}"
          encoding="ISO-8859-1"
          debug="true"
          includes="**/*.java">
      <classpath>
        <pathelement path="${wekaJar}"/>
      </classpath>
   </javac>
 </target>

  <!-- Compilieren Stub fuer die Klasse Coordinator in /simulator,
       die Klasse VisualisationDelegate in /visualisation und
       die Klasse VisualisationServer in /simulator/visualisation-->
 <target name="_Stub" depends="compile"
         description="Erstellt die Stub-Dateien">
   <echo message="erstelle Stub-Datei fuer Coordinator"/>
   <rmic base="${build}"
         debug="true"
         classname="nereus.simulator.Coordinator"/>
   <echo message="erstelle Stub-Datei fuer VisualisationDelegate"/>
   <rmic base="${build}"
         debug="true"
         classname="nereus.visualisation.VisualisationDelegate"/>
   <echo message="erstelle Stub-Datei fuer VisualisationServer"/>
   <rmic base="${build}"
         debug="true"
         classname="nereus.simulator.visualisation.VisualisationServer"/>
 </target>
   
 <!-- Compilieren aller Projekt-Dateien mit Scenarios                -->
 <target name="compileAll" depends="compile, _Stub"
         description="Compiliert alle Projekt-Dateien (mit scenarios)...">
   <echo message="compiliere alle Projekt-Dateien mit Szenario-Dateien..."/>
   <!-- Durch debug="true" wird bei Exceptions die Zeile im Source   -->
   <!-- mit ausgegeben                                               -->
 </target>
     
 <target name="_scenariosClient" depends="compileAll"
   description="Erzeugt Szenario-Dateien fuer den Client">
    <!-- Durch debug="true" wird bei Exceptions die Zeile im Source   -->
    <!-- mit ausgegeben     -->
   <echo message="erzeuge Szenario-Dateien fuer den Client... "/>
   <mkdir dir="${dist}"/>
   <mkdir dir="${dist}/client/scenarios"/>
   <!--<copy todir="${dist}/client/scenarios">
       <fileset dir="${build}/scenarios/" includes="**/agents/*.class, 
                       **/agenteninfo/*.class, **/interfaces/*.class, 
                       **/einfacheUmgebung/*.class"/>    
   </copy> -->
   <mkdir dir="${classes}/agents"/>
   <copy todir="${classes}/agents">
     <fileset dir="build/agents/" includes="**/*.class"/>
   </copy>
 </target>
   
 <!-- Erzeugung der jar-Dateien                                      -->
 <target name="_bienenstockScenarioJar" depends="compileAll"
         description="Erzeugt die jar-Datei vom Bienenstock-Szenarion">
   <!-- Durch debug="true" wird bei Exceptions die Zeile im Source   -->
   <!-- mit ausgegeben     -->
   <mkdir dir="${dist}"/>
   <delete file="${dist}/BienenstockScenario.jar"
           quiet="true"/>
   <jar destfile="${dist}/BienenstockScenario.jar"
        encoding="ISO-8859-1"
        basedir="${build}"
        includes="scenarios/bienenstock/**/*.class">
    </jar>
 </target>

 <target name="_scenariosServer" depends="compileAll, _bienenstockScenarioJar"
         description="Erzeugt Szenario-Dateien fuer den Server">
   <!-- Durch debug="true" wird bei Exceptions die Zeile im Source   -->
   <!-- mit ausgegeben     -->
   <echo message="erzeuge Szenario-Dateien fuer den Server... "/>                                      
   <mkdir dir="${dist}"/>
<!-- umbenennen -->
   <copy todir="${dist}/server/scenarios">
     <fileset dir="${scenariosconfig}" includes="**/*.gml, **/*.xml"/>
   </copy>
   <!-- excludes="**/*Agent*.class"/> -->
 </target>

 <target name="bienenstockVisJar" depends="compileAll"
         description="Erzeugt Jar-Datei fuer die Visualisierung vom
                      Bienenstock-Scenario">
   <!-- Durch debug="true" wird bei Exceptions die Zeile im Source   -->
   <!-- mit ausgegeben     -->
   <mkdir dir="${dist}"/>
   <delete file="${dist}/BienenstockVis.jar"
           quiet="true"/>
   <jar destfile="${dist}/BienenstockVis.jar"
        encoding="ISO-8859-1"
        basedir="${build}"
        includes="scenarios/bienenstock/visualisationgui/**,
                  scenarios/bienenstock/visualisierungsUmgebung/**,
                  scenarios/bienenstock/agenteninfo/**">
    </jar>
 </target>

 <target name="serverJar" depends="compileAll, _scenariosServer"
         description="Erstellt die jar-Datei der Server-Klassen">
   <mkdir dir="${dist}"/>
   <!-- Workaround: Da ant Version 1.6.2 die jar-Datei nicht ersetzt,    -->
   <!--             wenn sich eine der enthaltenen Dateien geändert hat, -->
   <!--             wird die jar-Datei vorweg gelöscht.                  -->
   <delete file="${dist}/Server.jar"
           quiet="true"/>
   <jar destfile="${dist}/Server.jar"
        encoding="ISO-8859-1"
        basedir="${build}"
        includes="nereus/utils/**, nereus/agentutils/**, nereus/communication/**,
                  nereus/exceptions/**, nereus/visualisation/**,
                  nereus/simulatorinterfaces/**, nereus/simulator/**"
        excludes="**/agents/*.class">
     <manifest>
       <attribute name="Main-Class"
                  value="nereus.simulator.MASIMServer"/>
     </manifest>
   </jar>
 </target>
  
 <target name="clientJar" depends="compileAll,_scenariosClient"
         description="Erstellt die jar-Datei der Client-Klassen">
   <mkdir dir="${dist}"/>
   <mkdir dir="${dist}/client"/>
   <!-- Workaround: Da ant Version 1.6.2 die jar-Datei nicht ersetzt,    -->
   <!--             wenn sich eine der enthaltenen Dateien geändert hat, -->
   <!--             wird die jar-Datei vorweg gelöscht.                  -->
   <delete file="${dist}/Client.jar"
           quiet="true"/>
   <jar destfile="${dist}/Client.jar"
        encoding="ISO-8859-1"
        basedir="${build}"
        includes="nereus/registrationgui/**,nereus/utils/**, nereus/communication/**,nereus/exceptions/**,
                  nereus/visualisation/**,nereus/simulatorinterfaces/**,
		  nereus/simulator/visualisation/Spielende.class,
		  nereus/visualisationclient/**,
                  nereus/webserver/**,
                  nereus/simulator/Coordinator_Stub.class,
                  nereus/visualisation/VisualisationDelegate_Stub.class
		  nereus/simulator/visualisation/VisualisationServer_Stub.class">
     <manifest>
       <attribute name="Main-Class" value="nereus.registrationgui.MASIMClient"/>
     </manifest>
   </jar>
 </target>
    
  <target name="_client" depends="clientJar, _scenariosClient"
   description="Erstellt die Jar Dateien für Client-Klassen mit
                zugehoerigen resource-Dateien.">
   <mkdir dir="${dist}/client"/>
   <copy file="${dist}/Client.jar" tofile="${dist}/client/dist/Client.jar"/>    
   <copy todir="${dist}/client/config">
     <fileset dir="${config}" includes="client.policy"/>
   </copy>
   <copy todir="${dist}/client/runScripts">
     <fileset dir="${runScripts}" includes="*Client*.*, setup.*"/>
   </copy>
   <copy todir="${dist}/client">
     <fileset dir="${documentation}" includes="Readme.txt, ReadmeClient.txt"/>
   </copy>
   <copy file="${config}/clientconfig.xml" tofile="${dist}/client/config/clientconfig.xml"/>
 </target>
    
 <target name="_server" depends="serverJar, _scenariosServer"
   description="Erstellt die Jar Dateien für Server-Klassen mit
                zugehoerigen resource-Dateien.">
   <mkdir dir="${dist}/server"/>
   <copy file="${dist}/Server.jar" tofile="${dist}/server/dist/Server.jar"/>    
   <copy todir="${dist}/server/config">
    <fileset dir="${config}" includes="server.policy"/>
    </copy>
    <copy todir="${dist}/server/runScripts">
    <fileset dir="${runScripts}" includes="*Server*.*, setup.*"/>
   </copy>
   <copy todir="${dist}/server/scenarios">
     <fileset dir="${scenariosconfig}" includes="**/*.gml, **/*.xml"/>
   </copy>
   <copy todir="${dist}/server">
     <fileset dir="${documentation}" includes="Readme.txt, ReadmeServer.txt"/>
   </copy>
   <copy file="${config}/serverconfig.xml" tofile="${dist}/server/config/serverconfig.xml"/>
 </target>
  
<!--
 <target name="serverTar" depends="server"
        description="Erstellt die tar.gz-Datei fuer den Server">
   <tar destfile="${dist}/Server.tar.gz" 
        compression="gzip">
     <tarfileset dir="${dist}/server" mode="644">
       <include name="**/*.*"/>
     </tarfileset>
   </tar>
 </target> 
 --> 
 <target name="serverTar" depends="serverJar, compileAll, _scenariosServer,
                                   _bienenstockScenarioJar"
    description="Erstellt die tar.gz-Datei der Server-Dateien">
    <tar destfile="${dist}/Server.tar.gz"
         compression="gzip">
      <tarfileset dir="${dist}"
                  mode="644"
                  prefix="/server/dist">
        <include name="Server.jar"/>
        <include name="BienenstockScenario.jar"/>
      </tarfileset>
      <tarfileset dir="${config}"
                  mode="644"
                  prefix="/server/config">
        <include name="server.policy"/>        
      </tarfileset>
      <tarfileset dir="${config}"
                  mode="644"
                  prefix="/server/config">
        <include name="serverconfig.xml"/>        
      </tarfileset>
      <tarfileset dir="${runScripts}"
                  mode="755"
                  prefix="/server/runScripts">
        <include name="setup.*"/>
        <include name="*Server.*"/>
      </tarfileset>
<!-- umbenennen -->
      <tarfileset dir="${dist}/server/scenarios"
                  mode="644"
                  prefix="/server/scenarios">
        <include name="**/*.*"/>
      </tarfileset>
      <tarfileset dir="${documentation}"
                  mode="644"
                  prefix="/server/">
        <include name="Readme.txt" />
        <include name="ReadmeServer.txt"/>
      </tarfileset>
    </tar>
  </target>
  
  <target name="clientTar" depends="compileAll, clientJar, _scenariosClient,
                                    bienenstockVisJar"
    description="Erstellt die tar.gz-Datei der Client-Dateien">
    <tar destfile="${dist}/Client.tar.gz"
         compression="gzip">
      <tarfileset dir="${dist}"
                  mode="644"
                  prefix="/client/dist">
        <include name="Client.jar"/>
        <include name="BienenstockScenario.jar"/>
        <include name="BienenstockVis.jar"/>
      </tarfileset>
      <tarfileset dir="${config}"
                  mode="644"
                  prefix="/client/config">
        <include name="client.policy"/>
      </tarfileset>
      <tarfileset dir="${config}"
                  mode="644"
                  prefix="/client/config">
        <include name="clientconfig.xml"/>   
      </tarfileset>     
      <tarfileset dir="${runScripts}"
                  mode="755"
                  prefix="/client/runScripts">
        <include name="setup.*"/>
        <include name="*Client*.*"/>
      </tarfileset>
      <tarfileset dir="${classes}/agents"
                  mode="644"
                  prefix="/client/classes/agents">
        <include name="**/*.*"/>
      </tarfileset>
      <tarfileset dir="${documentation}"
                  mode="644"
                  prefix="/client">
        <include name="Readme.txt" />
        <include name="ReadmeClient.txt"/>
      </tarfileset>
      <tarfileset dir="${libs}/bilder"
                  mode="644"
                  prefix="/client/libs/bilder">
        <include name="*.gif"/>
      </tarfileset>
    </tar>
  </target>
   
 <!--
 <target name="clientTar" depends="client"
    description="Erstellt die tar.gz-Datei fuer den Client">
   <tar destfile="${dist}/Client.tar.gz"
        compression="gzip">
     <tarfileset dir="${dist}/client"
             mode="644">
       <include name="**/*.*"/>
     </tarfileset>
   </tar>
 </target>
 -->
 
 <target name="buildAll" depends="_server, _client"
    description="Erstellt Dateien fuer den Client und den Server">
 </target>
 
 <target name="allTar" depends="serverTar, clientTar"
    description="Erstellt Tar-Dateien fuer den Client und den Server">
 </target>

 <target name="clean">
   <delete dir="${build}"/>
   <delete dir="${dist}"/>
   <delete dir="${classes}"/>
 </target>

 <target name="help">
    <echo message="Benutzung: ant ziel"/>
    <echo message="Moegliche Werte fuer ziel sind:"/>
    <echo message=""/>
    <echo message="  compileAll : Compilieren aller Projekt-Dateien mit Scenarios"/>
    <echo message=""/>
    <echo message="  serverTar  : Erzeugt die tar.gz-Datei zum Server"/>
    <echo message="  clientTar  : Erzeugt die tar.gz-Datei zum Client"/>
    <echo message="  allTar     : Erstellt Tar-Dateien fuer den Client und den Server"/>
    <echo message=""/>
    <echo message="  clean      : Loescht alle von ant erzeugten Dateien"/>
    <echo message="  help       : Gibt diesen Text zur Benutzung aus"/>
  </target>
</project>

